    const readline = require("readline");
    const axios = require("axios");

    const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    });

    const supportedCurrencies = [
    "USD", "ZAR", "TRY" // ‚úÖ EGP (Egyptian Pound) ƒë√∫ng
    ];

    console.log("üí± Currency Converter CLI (d√πng readline + axios)");

    const askQuestion = (question) => {
    return new Promise((resolve) => rl.question(question, resolve));
    };

    const convertCurrency = async () => {
    try {
        const from = (await askQuestion(`Convert From (${supportedCurrencies.join(", ")}): `)).toUpperCase();
        const to = (await askQuestion(`Convert To (${supportedCurrencies.join(", ")}): `)).toUpperCase();
        const amountStr = await askQuestion("Amount to convert: ");
        const amount = parseFloat(amountStr);

        if (
        isNaN(amount) ||
        !supportedCurrencies.includes(from) ||
        !supportedCurrencies.includes(to)
        ) {
        console.log("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. H√£y th·ª≠ l·∫°i.");
        rl.close();
        return;
        }

        const res = await axios.get(`https://api.frankfurter.app/latest?amount=${amount}&from=${from}&to=${to}`);
        const converted = res.data.rates[to];

        console.log(`‚úÖ ${amount} ${from} = ${converted} ${to}`);
    } catch (err) {
        console.error("‚ö†Ô∏è Error: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API ho·∫∑c lo·∫°i ti·ªÅn kh√¥ng h·ª£p l·ªá.");
    } finally {
        rl.close();
    }
    };

    convertCurrency();
